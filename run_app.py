# run_app.py

"""
Script ch·∫°y RAG Chatbot Pro v·ªõi c√°c t√πy ch·ªçn kh√°c nhau - Fixed Version
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path

def check_requirements():
    """Ki·ªÉm tra requirements"""
    required_packages = [
        ("streamlit", "Streamlit web framework"),
        ("langchain", "LangChain framework"),
        ("plotly", "Plotly for charts"),
        ("pandas", "Data manipulation"),
        ("numpy", "Numerical computing"),
        ("openai", "OpenAI client"),
        ("chromadb", "Vector database")
    ]
    
    print("üì¶ Ki·ªÉm tra dependencies...")
    missing = []
    
    for package, description in required_packages:
        try:
            __import__(package)
            print(f"   ‚úÖ {package} ({description})")
        except ImportError:
            missing.append(package)
            print(f"   ‚ùå {package} ({description}) - Missing")
    
    if missing:
        print(f"\n‚ùå Missing packages: {', '.join(missing)}")
        print("Run: pip install -r requirements.txt")
        return False
    
    print("‚úÖ T·∫•t c·∫£ dependencies ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t!")
    return True

def check_env():
    """Ki·ªÉm tra environment variables"""
    if not os.path.exists('.env'):
        print("‚ùå File .env kh√¥ng t·ªìn t·∫°i")
        print("Ch·∫°y: python setup_dev.py")
        return False
    
    # Load .env
    try:
        # Simple .env reader
        env_vars = {}
        with open('.env', 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip().strip('"\'')
        
        api_key = env_vars.get('OPENROUTER_API_KEY', '')
        if not api_key or api_key == 'your_openrouter_api_key_here':
            print("‚ùå OPENROUTER_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
            print("C·∫≠p nh·∫≠t API key trong file .env")
            return False
        
        print("‚úÖ Environment variables OK")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi load .env: {e}")
        return False

def run_streamlit(app_file="app_pro.py", port=8501, host="0.0.0.0", debug=False):
    """Ch·∫°y Streamlit app"""
    print(f"üöÄ Ch·∫°y {app_file} tr√™n {host}:{port}")
    
    cmd = [
        "streamlit", "run", app_file,
        "--server.port", str(port),
        "--server.address", host,
        "--server.headless", "true" if not debug else "false"
    ]
    
    if debug:
        cmd.extend(["--logger.level", "debug"])
    
    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi ch·∫°y Streamlit: {e}")
        sys.exit(1)
    except FileNotFoundError:
        print("‚ùå Streamlit ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Ch·∫°y: pip install streamlit")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\nüëã T·∫°m d·ª´ng ·ª©ng d·ª•ng")

def run_demo():
    """Ch·∫°y demo t∆∞∆°ng t√°c"""
    print("üéÆ Ch·∫°y demo t∆∞∆°ng t√°c...")
    
    if not os.path.exists("run_demo.py"):
        print("‚ùå File run_demo.py kh√¥ng t·ªìn t·∫°i")
        return False
    
    try:
        subprocess.run([sys.executable, "run_demo.py"], check=True)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi ch·∫°y demo: {e}")
        return False
    except KeyboardInterrupt:
        print("\nüëã T·∫°m d·ª´ng demo")
        return True

def run_tests():
    """Ch·∫°y tests c∆° b·∫£n"""
    print("üß™ Ch·∫°y tests...")
    
    try:
        # Test imports
        from modules.pdf_processor import PDFProcessor
        from modules.vector_store import VectorStore
        from modules.llm_wrapper import LLMWrapper
        from modules.rag_pipeline import RAGPipeline
        from config import app_config
        from utils.logger import get_logger
        from utils.cache import get_cache
        from utils.metrics import get_metrics
        
        print("‚úÖ Import tests passed")
        
        # Test components
        logger = get_logger("test")
        cache = get_cache()
        metrics = get_metrics()
        
        # Test cache
        cache.set("test_key", "test_value")
        assert cache.get("test_key") == "test_value"
        
        print("‚úÖ Component tests passed")
        print("üéâ T·∫•t c·∫£ tests ƒë·ªÅu pass!")
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        return False

def setup_environment():
    """Setup m√¥i tr∆∞·ªùng ph√°t tri·ªÉn"""
    print("üîß Setup m√¥i tr∆∞·ªùng ph√°t tri·ªÉn...")
    
    if not os.path.exists("setup_dev.py"):
        print("‚ùå File setup_dev.py kh√¥ng t·ªìn t·∫°i")
        return False
    
    try:
        subprocess.run([sys.executable, "setup_dev.py"], check=True)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi setup: {e}")
        return False

def main():
    """H√†m ch√≠nh"""
    parser = argparse.ArgumentParser(
        description="RAG Chatbot Pro - Enhanced Runner Script",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python run_app.py --mode app                 # Ch·∫°y ·ª©ng d·ª•ng Pro
  python run_app.py --mode app --port 8502     # Ch·∫°y tr√™n port kh√°c
  python run_app.py --mode basic               # Ch·∫°y ·ª©ng d·ª•ng c∆° b·∫£n
  python run_app.py --mode demo                # Ch·∫°y demo t∆∞∆°ng t√°c
  python run_app.py --mode test                # Ch·∫°y tests
  python run_app.py --mode setup               # Setup m√¥i tr∆∞·ªùng
  python run_app.py --mode check               # Ki·ªÉm tra dependencies
        """
    )
    
    parser.add_argument(
        "--mode",
        choices=["app", "basic", "demo", "test", "setup", "check"],
        default="app",
        help="Ch·∫ø ƒë·ªô ch·∫°y (default: app)"
    )
    
    parser.add_argument(
        "--port",
        type=int,
        default=8501,
        help="Port cho Streamlit (default: 8501)"
    )
    
    parser.add_argument(
        "--host",
        default="0.0.0.0",
        help="Host cho Streamlit (default: 0.0.0.0)"
    )
    
    parser.add_argument(
        "--debug",
        action="store_true",
        help="B·∫≠t debug mode"
    )
    
    args = parser.parse_args()
    
    print("üöÄ RAG Chatbot Pro - Enhanced Runner")
    print("=" * 50)
    print(f"üìã Mode: {args.mode}")
    if args.mode in ["app", "basic"]:
        print(f"üåê URL: http://{args.host}:{args.port}")
    if args.debug:
        print("üîç Debug mode: ON")
    print("=" * 50)
    
    # Pre-flight checks
    if args.mode in ["app", "basic", "demo", "test"]:
        if not check_requirements():
            sys.exit(1)
    
    if args.mode in ["app", "basic", "demo"]:
        if not check_env():
            sys.exit(1)
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    if args.mode == "app" and not os.path.exists("app_pro.py"):
        print("‚ùå File app_pro.py kh√¥ng t·ªìn t·∫°i!")
        sys.exit(1)
    
    if args.mode == "basic" and not os.path.exists("app.py"):
        print("‚ùå File app.py kh√¥ng t·ªìn t·∫°i!")
        sys.exit(1)
    
    # Ch·∫°y theo mode
    success = True
    
    if args.mode == "app":
        run_streamlit("app_pro.py", args.port, args.host, args.debug)
    elif args.mode == "basic":
        run_streamlit("app.py", args.port, args.host, args.debug)
    elif args.mode == "demo":
        success = run_demo()
    elif args.mode == "test":
        success = run_tests()
    elif args.mode == "setup":
        success = setup_environment()
    elif args.mode == "check":
        success = check_requirements()
    
    if success:
        print("\n‚úÖ Ho√†n th√†nh!")
    else:
        print("\n‚ùå C√≥ l·ªói x·∫£y ra!")
        sys.exit(1)

if __name__ == "__main__":
    main()
