# setup_dev.py

"""
Script setup m√¥i tr∆∞·ªùng development cho RAG Chatbot Pro
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(command, description=""):
    """Ch·∫°y command v√† hi·ªÉn th·ªã k·∫øt qu·∫£"""
    print(f"üîÑ {description}")
    print(f"Running: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Success!")
            if result.stdout:
                print(f"Output: {result.stdout}")
        else:
            print("‚ùå Error!")
            if result.stderr:
                print(f"Error: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        return False
    
    return True

def create_directories():
    """T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt"""
    directories = [
        "logs",
        "cache", 
        "uploads",
        "models",
        "docs",
        "tests",
        "data"
    ]
    
    print("üìÅ T·∫°o directories...")
    for dir_name in directories:
        Path(dir_name).mkdir(exist_ok=True)
        print(f"   ‚úÖ {dir_name}/")

def create_env_file():
    """T·∫°o file .env m·∫´u"""
    env_content = """# OpenRouter API Key
OPENROUTER_API_KEY=your_openrouter_api_key_here

# App Configuration
APP_TITLE="RAG Chatbot Pro"
APP_DESCRIPTION="Chatbot RAG th√¥ng minh v·ªõi kh·∫£ nƒÉng h·ªèi ƒë√°p t√†i li·ªáu PDF b·∫±ng ti·∫øng Vi·ªát"
MAX_FILE_SIZE=52428800  # 50MB

# LLM Configuration
DEFAULT_MODEL="mistralai/mistral-7b-instruct"
TEMPERATURE=0.7
MAX_TOKENS=1024

# Vector Store Configuration
EMBEDDING_MODEL="bkai-foundation-models/vietnamese-bi-encoder"
CHUNK_SIZE=1000
CHUNK_OVERLAP=200
MIN_CHUNK_SIZE=500

# Cache Configuration
ENABLE_CACHE=true
CACHE_TTL=3600

# Logging Configuration
LOG_LEVEL=INFO
LOG_FILE=logs/app.log
"""
    
    if not os.path.exists('.env'):
        with open('.env', 'w') as f:
            f.write(env_content)
        print("‚úÖ ƒê√£ t·∫°o file .env")
    else:
        print("‚ÑπÔ∏è File .env ƒë√£ t·ªìn t·∫°i")

def install_requirements():
    """C√†i ƒë·∫∑t requirements"""
    print("üì¶ C√†i ƒë·∫∑t Python packages...")
    
    if not run_command("pip install --upgrade pip", "Upgrade pip"):
        return False
    
    if not run_command("pip install -r requirements.txt", "Install requirements"):
        return False
    
    return True

def setup_git():
    """Setup git repository"""
    print("üîß Setup Git...")
    
    if not os.path.exists('.git'):
        run_command("git init", "Initialize git repository")
        run_command("git add .", "Add all files")
        run_command("git commit -m 'Initial commit'", "Initial commit")
    else:
        print("‚ÑπÔ∏è Git repository ƒë√£ t·ªìn t·∫°i")

def run_tests():
    """Ch·∫°y tests c∆° b·∫£n"""
    print("üß™ Ch·∫°y tests...")
    
    # Test import modules
    try:
        from modules.pdf_processor import PDFProcessor
        from modules.vector_store import VectorStore
        from modules.llm_wrapper import LLMWrapper
        from modules.rag_pipeline import RAGPipeline
        from config import app_config
        from utils.logger import get_logger
        from utils.cache import get_cache
        from utils.metrics import get_metrics
        
        print("‚úÖ T·∫•t c·∫£ modules import th√†nh c√¥ng")
        
        # Test logger
        logger = get_logger()
        logger.info("Test logging")
        print("‚úÖ Logger ho·∫°t ƒë·ªông")
        
        # Test cache
        cache = get_cache()
        cache.set("test_key", "test_value")
        value = cache.get("test_key")
        assert value == "test_value"
        print("‚úÖ Cache ho·∫°t ƒë·ªông")
        
        # Test metrics
        metrics = get_metrics()
        current_metrics = metrics.get_metrics()
        assert isinstance(current_metrics, dict)
        print("‚úÖ Metrics ho·∫°t ƒë·ªông")
        
        print("üéâ T·∫•t c·∫£ tests c∆° b·∫£n ƒë√£ pass!")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        return False
    
    return True

def main():
    """H√†m ch√≠nh"""
    print("üöÄ RAG Chatbot Pro - Development Setup")
    print("="*50)
    
    # Ki·ªÉm tra Python version
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ is required!")
        sys.exit(1)
    
    print(f"‚úÖ Python {sys.version}")
    
    # Setup steps
    steps = [
        ("T·∫°o directories", create_directories),
        ("T·∫°o file .env", create_env_file),
        ("C√†i ƒë·∫∑t requirements", install_requirements),
        ("Setup Git", setup_git),
        ("Ch·∫°y tests", run_tests)
    ]
    
    for step_name, step_func in steps:
        print(f"\nüìã {step_name}...")
        try:
            if not step_func():
                print(f"‚ùå {step_name} failed!")
                break
        except Exception as e:
            print(f"‚ùå {step_name} error: {e}")
            break
    else:
        print("\nüéâ Setup ho√†n th√†nh!")
        print("\nüìñ B∆∞·ªõc ti·∫øp theo:")
        print("1. C·∫≠p nh·∫≠t OPENROUTER_API_KEY trong file .env")
        print("2. Ch·∫°y: streamlit run app_pro.py")
        print("3. Ho·∫∑c ch·∫°y demo: python run_demo.py")
        print("\nüîó T√†i li·ªáu: README.md")
        return
    
    print("\n‚ùå Setup kh√¥ng th√†nh c√¥ng!")
    print("Vui l√≤ng ki·ªÉm tra l·∫°i c√°c l·ªói ph√≠a tr√™n")

if __name__ == "__main__":
    main()
